#define TINY_GSM_MODEM_SIM800
#include <TinyGsmClient.h>
#include <ArduinoHttpClient.h>
#include <ArduinoJson.h>
#include <SPI.h>
#include <LoRa.h>

#define SerialMon Serial
#define MODEM_RST 5
#define MODEM_PWRKEY 4
#define MODEM_POWER_ON 23
#define MODEM_TX 27
#define MODEM_RX 26
#define BLUE_LED 13
#define MOTOPOMPE_PIN 32
#define SerialAT Serial1


#define SCK 18
#define MISO 19
#define MOSI 21
#define SS 15
#define RST 22
#define DIO0 2

#define TINY_GSM_RX_BUFFER 1024

const char apn[] = "internet.tn";
const char gprsUser[] = "";
const char gprsPass[] = "";


const char server[] = "testlilygo-default-rtdb.firebaseio.com";
const char resource[] = "/data.json";
const int port = 443;
const String FIREBASE_AUTH = "BDWr2Ie3r6dBvKFIG1tT8vzlaQgE20fHHw9B33MQ";

float temperature, humidite, humiditeSol;

TinyGsm modem(Serial1);
TinyGsmClientSecure client(modem, 0);
HttpClient http_client(client, server, port);

DynamicJsonDocument firebaseData(512);
DynamicJsonDocument doc(256);

void setupModem() {
  pinMode(MODEM_RST, OUTPUT);
  pinMode(MODEM_PWRKEY, OUTPUT);
  pinMode(MODEM_POWER_ON, OUTPUT);

  digitalWrite(MODEM_POWER_ON, HIGH);
  digitalWrite(MODEM_RST, HIGH);
  digitalWrite(MODEM_PWRKEY, HIGH);
  delay(100);
  digitalWrite(MODEM_PWRKEY, LOW);
  delay(1000);
  digitalWrite(MODEM_PWRKEY, HIGH);
  digitalWrite(BLUE_LED, LOW);
  pinMode(MOTOPOMPE_PIN, OUTPUT);

}

void setup() {
  SerialMon.begin(115200);
  delay(10);

  setupModem();
  Serial1.begin(115200, SERIAL_8N1, MODEM_RX, MODEM_TX);

  SerialMon.println("Initializing modem...");
  modem.restart();

  SerialMon.print("Waiting for network...");
  if (!modem.waitForNetwork()) {
    SerialMon.println(" fail");
    while (true);
  }
  SerialMon.println(" success");

  if (!modem.gprsConnect(apn)) {
    SerialMon.println("GPRS connection failed");
    while (true);
  }
  SerialMon.println("GPRS connected");

  SPI.begin(SCK, MISO, MOSI, SS);
  LoRa.setPins(SS, RST, DIO0);
  if (!LoRa.begin(433E6)) {
    SerialMon.println("LoRa init failed.");
    while (true);
  }
  SerialMon.println("LoRa ready");
}


void sendToFirebase(float temperature, float humidite, float humiditeSol) {
  if (!modem.isGprsConnected()) {
    SerialMon.println("Connexion GPRS...");
    if (!modem.gprsConnect(apn, gprsUser, gprsPass)) {
      SerialMon.println("Échec connexion GPRS");
      return;
    }
  }

  if (!client.connect(server, port)) {
    SerialMon.println("Échec connexion serveur Firebase");
    return;
  }

  DynamicJsonDocument docPost(256);
  docPost["temperature"] = temperature;
  docPost["humidite"] = humidite;
  docPost["humiditeSol"] = humiditeSol;

  String postData;
  serializeJson(docPost, postData);

  http_client.beginRequest();
  http_client.patch(resource);  // /data.json
  http_client.sendHeader("Content-Type", "application/json");
  http_client.sendHeader("Content-Length", postData.length());
  http_client.sendHeader("auth", FIREBASE_AUTH);  // ta clé d'auth Firebase
  http_client.beginBody();
  http_client.print(postData);
  http_client.endRequest();

  int statusCode = http_client.responseStatusCode();
  SerialMon.print("Code retour Firebase: ");
  SerialMon.println(statusCode);

  if (statusCode == 200) {
    SerialMon.println("Données mises à jour sur Firebase !");
  } else {
    SerialMon.println("Échec mise à jour Firebase");
  }

  http_client.stop();
}

void sendLoRaCommand(String command) {
  LoRa.beginPacket();
  LoRa.print(command);
  LoRa.endPacket();
  SerialMon.println("Commande LoRa envoyée: " + command);
}
unsigned long lastPrint = 0;

void loop() {
  int packetSize = LoRa.parsePacket();
  if (packetSize > 0) {
    SerialMon.print("Message reçu : ");
    String message = "";
    while (LoRa.available()) {
      char c = (char)LoRa.read();
      message += c;
      SerialMon.print(c);
    }
    SerialMon.println();

    // Traite le message reçu (exemple sscanf)
    if (sscanf(message.c_str(), "T = %f,H = %f,H.Sol = %f", &temperature, &humidite, &humiditeSol) == 3) {
      SerialMon.print("Température : ");
      SerialMon.println(temperature);
      SerialMon.print("Humidité : ");
      SerialMon.println(humidite);
      SerialMon.print("Humidité sol : ");
      SerialMon.println(humiditeSol);
sendToFirebase(temperature, humidite, humiditeSol);

    } else {
      SerialMon.println("Format message invalide");
    }

  } else {
    if (millis() - lastPrint > 3000) {  // Affiche seulement toutes les 3 secondes
      SerialMon.println("Attente de données LoRa...");
      lastPrint = millis();
    }
  }


/*
 http_client.connectionKeepAlive();
    int err = http_client.get(resource);
    if (err != 0) {
      SerialMon.println(F("failed"));
      delay(1000);
      return;
    }

    int status = http_client.responseStatusCode();
    if (!status) {
      delay(10000);
      return;
    }

    String response = http_client.responseBody();
    deserializeJson(firebaseData, response);
    bool motopompe = firebaseData["motopompe"];
    bool vanne1 = firebaseData["vanne1"];
    bool vanne2 = firebaseData["vanne2"];


    SerialMon.print("Vanne1: ");
    SerialMon.println(vanne1 ? "ON" : "OFF");
    SerialMon.print("Vanne2: ");
    SerialMon.println(vanne2 ? "ON" : "OFF");
    SerialMon.print("Motopompe: ");
    SerialMon.println(motopompe ? "ON" : "OFF");



    // Contrôle des vannes
    sendLoRaCommand(vanne1 ? "VANNE1_ON" : "VANNE1_OFF");
    sendLoRaCommand(vanne2 ? "VANNE2_ON" : "VANNE2_OFF");


    int motopompeStatus = digitalRead(MOTOPOMPE_PIN);
    if (motopompe == true) {
      if (motopompeStatus == LOW) {
        SerialMon.print("Start motopompe");
        digitalWrite(MOTOPOMPE_PIN, HIGH);
      }
    } else {
      if (motopompeStatus == HIGH) {
        SerialMon.print("Stop motopompe");
        digitalWrite(MOTOPOMPE_PIN, LOW);
      }
    }

    delay(500);

*/


}
