#include <ArduinoHttpClient.h>
#include <ArduinoJson.h>
#define TINY_GSM_MODEM_SIM800
#include <TinyGsmClient.h>
#include <ArduinoHttpClient.h>

#include <SPI.h>
#include <LoRa.h>

#define TINY_GSM_MODEM_SIM800
#define TINY_GSM_RX_BUFFER 1024
#define SerialMon Serial


#define MODEM_RST 5
#define MODEM_PWRKEY 4
#define MODEM_POWER_ON 23
#define MODEM_TX 27
#define MODEM_RX 26
#define BLUE_LED 13
#define MOTOPOMPE_PIN 32
#define SerialAT Serial1





// Broches LoRa sur T-Call ESP32

#define SCK 18   //orange
#define MISO 19  //rouge
#define MOSI 21  //bleu
#define SS 15    //vert
#define RST 22   //jaune
#define DIO0 2   //violet

const char apn[] = "internet.tn";
const char gprsUser[] = "";
const char gprsPass[] = "";

const char server[] = "testlilygo-default-rtdb.firebaseio.com";
const char resource[] = "/data.json";
const int port = 443;

TinyGsm modem(SerialAT);
TinyGsmClientSecure client(modem, 0);
HttpClient http(client, server, port);

DynamicJsonDocument firebaseData(512);
DynamicJsonDocument docPost(256);



void sendLoRaCommand(String command) {
  LoRa.beginPacket();
  LoRa.print(command);
  LoRa.endPacket();
  SerialMon.println("Commande LoRa envoyée: " + command);
}

void setup() {

  SerialMon.begin(115200);
  delay(10);



  pinMode(MODEM_RST, OUTPUT);
  digitalWrite(MODEM_RST, HIGH);

  pinMode(MODEM_PWRKEY, OUTPUT);
  pinMode(MODEM_POWER_ON, OUTPUT);
  pinMode(BLUE_LED, OUTPUT);
  digitalWrite(MODEM_POWER_ON, HIGH);

  digitalWrite(MODEM_PWRKEY, HIGH);
  delay(100);
  digitalWrite(MODEM_PWRKEY, LOW);
  delay(1000);
  digitalWrite(MODEM_PWRKEY, HIGH);
  digitalWrite(BLUE_LED, LOW);
  pinMode(MOTOPOMPE_PIN, OUTPUT);

  SerialMon.println("LoRa starting");

  SPI.begin(SCK, MISO, MOSI, SS);
  LoRa.setPins(SS, RST, DIO0);
  if (!LoRa.begin(433E6)) {
    SerialMon.println("Erreur LoRa");
  } else {
    SerialMon.println("LoRa initialisé.");
  }

  SerialMon.println("Wait...");

  SerialAT.begin(115200, SERIAL_8N1, MODEM_RX, MODEM_TX);
  delay(6000);

  SerialMon.println("Initializing modem...");
  modem.restart();
}

void loop() {
  modem.gprsConnect(apn, gprsUser, gprsPass);

  SerialMon.print("Waiting for network...");
  if (!modem.waitForNetwork()) {
    SerialMon.println(" fail");
    delay(10000);
    return;
  }
  SerialMon.println(" success");

  if (modem.isNetworkConnected()) {
    SerialMon.println("Network connected");
  }

  SerialMon.print(F("Connecting to internet"));
  if (!modem.gprsConnect(apn, gprsUser, gprsPass)) {
    SerialMon.println(" fail");
    delay(10000);
    return;
  }
  SerialMon.println(" success");

  if (modem.isGprsConnected()) {
    SerialMon.println("GPRS connected");
  }

  SerialMon.print("Connecting to firebase");
  if (!client.connect(server, port)) {
    SerialMon.println(" fail");
    delay(10000);
    return;
  }
  SerialMon.println(" success");

  while (true) {

    float temperature, humidite, humiditeSol;
    String incoming = "";
    int packetSize = LoRa.parsePacket();
    if (packetSize) {
      SerialMon.println("packetSize > 0");
      while (LoRa.available()) {
        incoming += (char)LoRa.read();
      }

      SerialMon.println(incoming);

      if (incoming.length() > 0) {

        SerialMon.println("recieved data from lora");

        sscanf(incoming.c_str(), "%f;%f;%f", &temperature, &humidite, &humiditeSol);


        SerialMon.print("Température : ");
        SerialMon.println(temperature);
        SerialMon.print("Humidité : ");
        SerialMon.println(humidite);
        SerialMon.print("Humidité sol : ");
        SerialMon.println(humiditeSol);
      }
    }

    // SerialMon.println(F("read firebase data... "));
    http.connectionKeepAlive();
    int err = http.get(resource);
    if (err != 0) {
      SerialMon.println(F("failed"));
      delay(1000);
      return;
    }

    int status = http.responseStatusCode();
    if (!status) {
      delay(10000);
      return;
    }

    String response = http.responseBody();
    deserializeJson(firebaseData, response);
    bool motopompe = firebaseData["motopompe"];
    bool vanne1 = firebaseData["vanne1"];
    bool vanne2 = firebaseData["vanne2"];


    SerialMon.print("Vanne1: ");
    SerialMon.println(vanne1 ? "ON" : "OFF");
    SerialMon.print("Vanne2: ");
    SerialMon.println(vanne2 ? "ON" : "OFF");
    SerialMon.print("Motopompe: ");
    SerialMon.println(motopompe ? "ON" : "OFF");



    // Contrôle des vannes
    sendLoRaCommand(vanne1 ? "VANNE1_ON" : "VANNE1_OFF");
    sendLoRaCommand(vanne2 ? "VANNE2_ON" : "VANNE2_OFF");


    int motopompeStatus = digitalRead(MOTOPOMPE_PIN);
    if (motopompe == true) {
      if (motopompeStatus == LOW) {
        SerialMon.print("Start motopompe");
        digitalWrite(MOTOPOMPE_PIN, HIGH);
      }
    } else {
      if (motopompeStatus == HIGH) {
        SerialMon.print("Stop motopompe");
        digitalWrite(MOTOPOMPE_PIN, LOW);
      }
    }

    delay(500);
  }





  http.stop();
  SerialMon.println(F("Server disconnected"));

  modem.gprsDisconnect();
  SerialMon.println(F("GPRS disconnected"));
  while (true) { delay(1000); }
}